[
    {
        "title": "AnimatedAlign",
        "introductionEN": "Animated version of Align which automatically transitions the child's position over a given duration whenever the given alignment changes.",
        "introductionCN": "Align的动画版本，只要给定的对齐方式发生变化，它就会在给定的持续时间内自动转换孩子的位置。",
        "routeName": "Widget/Animation/AnimatedAlign",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedAlign-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ImplicitlyAnimatedWidget>AnimatedAlign",
        "constructors": "AnimatedAlign({Key? key, required AlignmentGeometry alignment, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, VoidCallback? onEnd})"
    },
    {
        "title": "AnimatedBuilder",
        "introductionEN": "A general-purpose widget for building animations. AnimatedBuilder is useful for more complex widgets that wish to include an animation as part of a larger build function. To use AnimatedBuilder, simply construct the widget and pass it a builder function.",
        "introductionCN": "用于构建动画的通用小部件。 AnimatedBuilder对于希望将动画作为更大构建函数的一部分包含在内的更复杂的小部件非常有用。 要使用AnimatedBuilder，只需构造窗口小部件并将其传递给构建器函数。",
        "routeName": "Widget/Animation/AnimatedBuilder",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>AnimatedBuilder",
        "constructors": "AnimatedBuilder({Key? key, required Listenable animation, required TransitionBuilder builder, Widget? child})"
    },
    {
        "title": "AnimatedContainer",
        "introductionEN": "A container that gradually changes its values over a period of time.",
        "introductionCN": "在一段时间内逐渐更改其值的容器。",
        "routeName": "Widget/Animation/AnimatedContainer",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ImplicitlyAnimatedWidget>AnimatedContainer",
        "constructors": "AnimatedContainer({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior, Curve curve = Curves.linear, required Duration duration, VoidCallback? onEnd})"
    },
    {
        "title": "AnimatedCrossFade",
        "introductionEN": "A widget that cross-fades between two given children and animates itself between their sizes.",
        "introductionCN": "一个小部件，它在两个给定的子节点之间交叉淡化，并在它们的大小之间设置动画。",
        "routeName": "Widget/Animation/AnimatedCrossFade",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedCrossFade-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedCrossFade",
        "constructors": "AnimatedCrossFade({Key? key, required Widget firstChild, required Widget secondChild, Curve firstCurve, Curve secondCurve, Curve sizeCurve, AlignmentGeometry alignment, required CrossFadeState crossFadeState, required Duration duration, Duration? reverseDuration, AnimatedCrossFadeBuilder layoutBuilder})"
    },
    {
        "title": "AnimatedDefaultTextStyle",
        "introductionEN": "Animated version of DefaultTextStyle which automatically transitions the default text style (the text style to apply to descendant Text widgets without explicit style) over a given duration whenever the given style changes.",
        "introductionCN": "DefaultTextStyle的动画版本，无论何时给定的样式发生更改，都会在给定的持续时间内自动转换默认文本样式（文本样式以应用于没有显式样式的后代Text小部件）。",
        "routeName": "Widget/Animation/AnimatedDefaultTextStyle",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedDefaultTextStyle-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ImplicitlyAnimatedWidget>AnimatedDefaultTextStyle",
        "constructors": "AnimatedDefaultTextStyle({Key? key, required Widget child, required TextStyle style, TextAlign? textAlign, bool softWrap, TextOverflow overflow, int? maxLines, TextWidthBasis textWidthBasis, TextHeightBehavior? textHeightBehavior, Curve curve = Curves.linear, required Duration duration, VoidCallback? onEnd})"
    },
    {
        "title": "AnimatedListState",
        "introductionEN": "The state for a scrolling container that animates items when they are inserted or removed.",
        "introductionCN": "滚动容器的状态，在插入或移除项目时为其设置动画。",
        "routeName": "Widget/Animation/AnimatedListState",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedListState-class.html",
        "inheritance": "Object>State<AnimatedList>>AnimatedListState",
        "constructors": "AnimatedListState()"
    },
    {
        "title": "AnimatedModalBarrier",
        "introductionEN": "A widget that prevents the user from interacting with widgets behind itself.",
        "introductionCN": "一个小部件，阻止用户与自身后面的小部件交互。",
        "routeName": "Widget/Animation/AnimatedModalBarrier",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedModalBarrier-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>AnimatedModalBarrier",
        "constructors": "AnimatedModalBarrier({Key? key, required Animation<Color?> color, bool dismissible, String? semanticsLabel, bool? barrierSemanticsDismissible})"
    },
    {
        "title": "AnimatedOpacity",
        "introductionEN": "Animated version of Opacity which automatically transitions the child's opacity over a given duration whenever the given opacity changes.",
        "introductionCN": "不透明度的动画版本，只要给定的不透明度发生变化，就会自动转换孩子在给定持续时间内的不透明度。",
        "routeName": "Widget/Animation/AnimatedOpacity",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedOpacity-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ImplicitlyAnimatedWidget>AnimatedOpacity",
        "constructors": "AnimatedOpacity({Key? key, Widget? child, required double opacity, Curve curve = Curves.linear, required Duration duration, VoidCallback? onEnd, bool alwaysIncludeSemantics})"
    },
    {
        "title": "AnimatedPhysicalModel",
        "introductionEN": "Animated version of PhysicalModel.",
        "introductionCN": "PhysicalModel的动画版本。",
        "routeName": "Widget/Animation/AnimatedPhysicalModel",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedPhysicalModel-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ImplicitlyAnimatedWidget>AnimatedPhysicalModel",
        "constructors": "AnimatedPhysicalModel({Key? key, required Widget child, required BoxShape shape, Clip clipBehavior, BorderRadius borderRadius, required double elevation, required Color color, bool animateColor, required Color shadowColor, bool animateShadowColor, Curve curve = Curves.linear, required Duration duration, VoidCallback? onEnd})"
    },
    {
        "title": "AnimatedPositioned",
        "introductionEN": "Animated version of Positioned which automatically transitions the child's position over a given duration whenever the given position changes.",
        "introductionCN": "定位的动画版本，可在给定位置发生变化时自动转换孩子在给定持续时间内的位置。",
        "routeName": "Widget/Animation/AnimatedPositioned",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedPositioned-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ImplicitlyAnimatedWidget>AnimatedPositioned",
        "constructors": "AnimatedPositioned({Key? key, required Widget child, double? left, double? top, double? right, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, VoidCallback? onEnd})"
    },
    {
        "title": "AnimatedSize",
        "introductionEN": "Animated widget that automatically transitions its size over a given duration whenever the given child's size changes.",
        "introductionCN": "动画小部件，只要给定孩子的大小发生变化，就会在给定的持续时间内自动转换大小。",
        "routeName": "Widget/Animation/AnimatedSize",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedSize-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>RenderObjectWidget>SingleChildRenderObjectWidget>AnimatedSize",
        "constructors": "AnimatedSize({Key? key, Widget? child, AlignmentGeometry alignment, Curve curve, required Duration duration, Duration? reverseDuration, required TickerProvider vsync, Clip clipBehavior})"
    },
    {
        "title": "AnimatedWidget",
        "introductionEN": "A widget that rebuilds when the given Listenable changes value.",
        "introductionCN": "在给定的Listenable更改值时重建的窗口小部件。",
        "routeName": "Widget/Animation/AnimatedWidget",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedWidget-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget",
        "constructors": "AnimatedWidget({Key? key, required Listenable listenable})"
    },
    {
        "title": "AnimatedWidgetBaseState",
        "introductionEN": "A base class for widgets with implicit animations.",
        "introductionCN": "具有隐式动画的小部件的基类。",
        "routeName": "Widget/Animation/AnimatedWidgetBaseState",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/AnimatedWidgetBaseState-class.html",
        "inheritance": "Object>State<T>>ImplicitlyAnimatedWidgetState<T>>AnimatedWidgetBaseState",
        "constructors": "AnimatedWidgetBaseState()"
    },
    {
        "title": "DecoratedBoxTransition",
        "introductionEN": "Animated version of a DecoratedBox that animates the different properties of its Decoration.",
        "introductionCN": "DecorativeBox的动画版本，用于动画其装饰的不同属性。",
        "routeName": "Widget/Animation/DecoratedBoxTransition",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/DecoratedBoxTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>DecoratedBoxTransition",
        "constructors": "DecoratedBoxTransition({Key? key, required Animation<Decoration> decoration, DecorationPosition position, required Widget child})"
    },
    {
        "title": "FadeTransition",
        "introductionEN": "Animates the opacity of a widget.",
        "introductionCN": "动画小部件的不透明度。",
        "routeName": "Widget/Animation/FadeTransition",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/FadeTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>RenderObjectWidget>SingleChildRenderObjectWidget>FadeTransition",
        "constructors": "FadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics, Widget? child})"
    },
    {
        "title": "Hero",
        "introductionEN": "A widget that marks its child as being a candidate for hero animations.",
        "introductionCN": "一个小部件，标记其子级为英雄动画的候选者。",
        "routeName": "Widget/Animation/Hero",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/Hero-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Hero",
        "constructors": "Hero({Key? key, required Object tag, CreateRectTween? createRectTween, HeroFlightShuttleBuilder? flightShuttleBuilder, HeroPlaceholderBuilder? placeholderBuilder, bool transitionOnUserGestures, required Widget child})"
    },
    {
        "title": "PositionedTransition",
        "introductionEN": "Animated version of Positioned which takes a specific Animation to transition the child's position from a start position to and end position over the lifetime of the animation.",
        "introductionCN": "Positioned的动画版本，它使特定的动画在动画的生命周期内将孩子的位置从起始位置转换到结束位置。",
        "routeName": "Widget/Animation/PositionedTransition",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/PositionedTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>PositionedTransition",
        "constructors": "PositionedTransition({Key? key, required Animation<RelativeRect> rect, required Widget child})"
    },
    {
        "title": "RotationTransition",
        "introductionEN": "Animates the rotation of a widget.",
        "introductionCN": "动画小部件的旋转。",
        "routeName": "Widget/Animation/AnimatedContainer",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/RotationTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>RotationTransition",
        "constructors": "RotationTransition({Key? key, required Animation<double> turns, Alignment alignment, Widget? child})"
    },
    {
        "title": "ScaleTransition",
        "introductionEN": "Animates the scale of transformed widget.",
        "introductionCN": "动画转换小部件的比例。",
        "routeName": "Widget/Animation/RotationTransition",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/ScaleTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>ScaleTransition",
        "constructors": "ScaleTransition({Key? key, required Animation<double> scale, Alignment alignment, Widget? child})"
    },
    {
        "title": "SizeTransition",
        "introductionEN": "Animates its own size and clips and aligns the child.",
        "introductionCN": "动画自己的大小和剪辑并对齐孩子。",
        "routeName": "Widget/Animation/SizeTransition",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/SizeTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>SizeTransition",
        "constructors": "SizeTransition({Key? key, Axis axis, required Animation<double> sizeFactor, double axisAlignment, Widget? child})"
    },
    {
        "title": "SlideTransition",
        "introductionEN": "Animates the position of a widget relative to its normal position.",
        "routeName": "Widget/Animation/SlideTransition",
        "introductionCN": "动画小部件相对于其正常位置的位置。",
        "imagePath": "",
        "docPath": "https://api.flutter.dev/flutter/widgets/SlideTransition-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AnimatedWidget>SlideTransition",
        "constructors": "SlideTransition({Key? key, required Animation<Offset> position, bool transformHitTests, TextDirection? textDirection, Widget? child})"
    }
]