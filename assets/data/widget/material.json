[
    {
        "title": "Appbar",
        "introductionEN": "A Material Design app bar. An app bar consists of a toolbar and potentially other widgets, such as a TabBar and a FlexibleSpaceBar.",
        "introductionCN": "Material Design应用栏。应用栏由工具栏和可能的其他小部件组成，例如TabBar和FlexibleSpaceBar。",
        "routeName": "Widget/Material/Appbar",
        "imagePath": "assets/images/material/material-app-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/Appbar-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>AppBar",
        "constructors": "AppBar({Key? key, Widget? leading, bool automaticallyImplyLeading, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, Color? shadowColor, ShapeBorder? shape, Color? backgroundColor, Color? foregroundColor, Brightness? brightness, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, TextTheme? textTheme, bool primary, bool? centerTitle, bool excludeHeaderSemantics, double? titleSpacing, double toolbarOpacity, double bottomOpacity, double? toolbarHeight, double? leadingWidth, bool? backwardsCompatibility, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle})"
    },
    {
        "title": "BottomNavigationBar",
        "introductionEN": "Bottom navigation bars make it easy to explore and switch between top-level views in a single tap. The BottomNavigationBar widget implements this component.",
        "introductionCN": "底部导航栏使您可以轻松浏览并在单击中切换顶级视图。 BottomNavigationBar小部件实现此组件。",
        "routeName": "Widget/Material/BottomNavigationBar",
        "imagePath": "assets/images/material/material-bottom-navigation-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/BottomNavigationBar-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>BottomNavigationBar",
        "constructors": "BottomNavigationBar({Key? key, required List<BottomNavigationBarItem> items, ValueChanged<int>? onTap, int currentIndex, double? elevation, BottomNavigationBarType? type, Color? fixedColor, Color? backgroundColor, double iconSize, Color? selectedItemColor, Color? unselectedItemColor, IconThemeData? selectedIconTheme, IconThemeData? unselectedIconTheme, double selectedFontSize, double unselectedFontSize, TextStyle? selectedLabelStyle, TextStyle? unselectedLabelStyle, bool? showSelectedLabels, bool? showUnselectedLabels, MouseCursor? mouseCursor, bool? enableFeedback})"
    },
    {
        "title": "Drawer",
        "introductionEN": "A Material Design panel that slides in horizontally from the edge of a Scaffold to show navigation links in an application.",
        "introductionCN": "“材质设计”面板，从“脚手架”边缘水平滑动，以显示应用程序中的导航链接。",
        "routeName": "Widget/Material/Drawer",
        "imagePath": "assets/images/material/material-drawer.png",
        "docPath": "https://api.flutter.dev/flutter/material/Drawer-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>Drawer",
        "constructors": "Drawer({Key? key, double elevation, Widget? child, String? semanticLabel})"
    },
    {
        "title": "MaterialApp",
        "introductionEN": "A convenience widget that wraps a number of widgets that are commonly required for applications implementing Material Design.",
        "introductionCN": "一个便利小部件，它包含了许多小部件，这些小部件通常是实现Material Design的应用程序所必需的。",
        "routeName": "Widget/Material/MaterialApp",
        "imagePath": "assets/images/material/materialdesign-introduction.png",
        "docPath": "https://api.flutter.dev/flutter/material/MaterialApp-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>MaterialApp",
        "constructors": "MaterialApp({Key? key, GlobalKey<NavigatorState>? navigatorKey, GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey, Widget? home, Map<String, WidgetBuilder> routes, String? initialRoute, RouteFactory? onGenerateRoute, InitialRouteListFactory? onGenerateInitialRoutes, RouteFactory? onUnknownRoute, List<NavigatorObserver> navigatorObservers, TransitionBuilder? builder, String title, GenerateAppTitle? onGenerateTitle, Color? color, ThemeData? theme, ThemeData? darkTheme, ThemeData? highContrastTheme, ThemeData? highContrastDarkTheme, ThemeMode? themeMode, Locale? locale, Iterable<LocalizationsDelegate>? localizationsDelegates, LocaleListResolutionCallback? localeListResolutionCallback, LocaleResolutionCallback? localeResolutionCallback, Iterable<Locale> supportedLocales, bool debugShowMaterialGrid, bool showPerformanceOverlay, bool checkerboardRasterCacheImages, bool checkerboardOffscreenLayers, bool showSemanticsDebugger, bool debugShowCheckedModeBanner, Map<LogicalKeySet, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, ScrollBehavior? scrollBehavior})"
    },
    {
        "title": "Scaffold",
        "introductionEN": "Implements the basic Material Design visual layout structure. This class provides APIs for showing drawers, snack bars, and bottom sheets.",
        "introductionCN": "实现基本的Material Design可视化布局结构。此类提供用于显示抽屉，小吃店和底部工作表的API。",
        "routeName": "Widget/Material/Scaffold",
        "imagePath": "assets/images/basics/layout-structure-regions-mobile.png",
        "docPath": "https://api.flutter.dev/flutter/material/Scaffold-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Scaffold",
        "constructors": "Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, Widget? drawer, DrawerCallback? onDrawerChanged, Widget? endDrawer, DrawerCallback? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary, DragStartBehavior drawerDragStartBehavior, bool extendBody, bool extendBodyBehindAppBar, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture, bool endDrawerEnableOpenDragGesture, String? restorationId})"
    },
    {
        "title": "SliverAppBar",
        "introductionEN": "A material design app bar that integrates with a CustomScrollView.",
        "introductionCN": "与CustomScrollView集成的材质设计应用栏。",
        "routeName": "Widget/Material/SliverAppBar",
        "imagePath": "assets/images/material/material-app-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/SliverAppBar-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>SliverAppBar",
        "constructors": "SliverAppBar({Key? key, Widget? leading, bool automaticallyImplyLeading, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, Color? shadowColor, bool forceElevated, Color? backgroundColor, Color? foregroundColor, Brightness? brightness, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, TextTheme? textTheme, bool primary, bool? centerTitle, bool excludeHeaderSemantics, double? titleSpacing, double? collapsedHeight, double? expandedHeight, bool floating, bool pinned, bool snap, bool stretch, double stretchTriggerOffset, AsyncCallback? onStretchTrigger, ShapeBorder? shape, double toolbarHeight, double? leadingWidth, bool? backwardsCompatibility, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle})"
    },
    {
        "title": "TabBar",
        "introductionEN": "A Material Design widget that displays a horizontal row of tabs.",
        "introductionCN": "“材质设计”窗口小部件，显示水平的选项卡行。",
        "routeName": "Widget/Material/TabBar",
        "imagePath": "assets/images/material/material-tab-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/TabBar-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>TabBar",
        "constructors": "TabBar({Key? key, required List<Widget> tabs, TabController? controller, bool isScrollable, Color? indicatorColor, bool automaticIndicatorColorAdjustment, double indicatorWeight, EdgeInsetsGeometry indicatorPadding, Decoration? indicator, TabBarIndicatorSize? indicatorSize, Color? labelColor, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Color? unselectedLabelColor, TextStyle? unselectedLabelStyle, DragStartBehavior dragStartBehavior, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, bool? enableFeedback, ValueChanged<int>? onTap, ScrollPhysics? physics})"
    },
    {
        "title": "TabBarView",
        "introductionEN": "A page view that displays the widget which corresponds to the currently selected tab. Typically used in conjunction with a TabBar.",
        "introductionCN": "显示与当前所选选项卡对应的窗口小部件的页面视图。通常与TabBar一起使用。",
        "routeName": "Widget/Material/TabBarView",
        "imagePath": "assets/images/material/material-tab-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/TabBarView-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>TabBarView",
        "constructors": "TabBarView({Key? key, required List<Widget> children, TabController? controller, ScrollPhysics? physics, DragStartBehavior dragStartBehavior})"
    },
    {
        "title": "TabController",
        "introductionEN": "Coordinates tab selection between a TabBar and a TabBarView.",
        "introductionCN": "协调TabBar和TabBarView之间的选项卡选择。",
        "routeName": "Widget/Material/TabController",
        "imagePath": "assets/images/material/material-tab-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/TabController-class.html",
        "inheritance": "Object>ChangeNotifier>TabController",
        "constructors": "TabController({int initialIndex = 0, required int length, required TickerProvider vsync})"
    },
    {
        "title": "TabPageSelector",
        "introductionEN": "Displays a row of small circular indicators, one per tab. The selected tab's indicator is highlighted. Often used in conjunction with a TabBarView.",
        "introductionCN": "显示一行小圆形指示器，每个选项卡一个。所选选项卡的指示器突出显示。通常与TabBarView结合使用。",
        "routeName": "Widget/Material/TabPageSelector",
        "imagePath": "assets/images/material/material-tab-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/TabPageSelector-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>TabPageSelector",
        "constructors": "TabPageSelector({Key? key, TabController? controller, double indicatorSize, Color? color, Color? selectedColor})"
    },
    {
        "title": "WidgetsApp",
        "introductionEN": "A convenience class that wraps a number of widgets that are commonly required for an application.",
        "introductionCN": "一个便利类，它包含了应用程序通常需要的许多小部件。",
        "routeName": "Widget/Material/WidgetsApp",
        "imagePath": "assets/images/material/material-widgets-app.png",
        "docPath": "https://api.flutter.dev/flutter/widgets/WidgetsApp-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>WidgetsApp",
        "constructors": "WidgetsApp({Key? key, GlobalKey<NavigatorState>? navigatorKey, RouteFactory? onGenerateRoute, InitialRouteListFactory? onGenerateInitialRoutes, RouteFactory? onUnknownRoute, List<NavigatorObserver> navigatorObservers, String? initialRoute, PageRouteFactory? pageRouteBuilder, Widget? home, Map<String, WidgetBuilder> routes, TransitionBuilder? builder, String title, GenerateAppTitle? onGenerateTitle, TextStyle? textStyle, required Color color, Locale? locale, Iterable<LocalizationsDelegate>? localizationsDelegates, LocaleListResolutionCallback? localeListResolutionCallback, LocaleResolutionCallback? localeResolutionCallback, Iterable<Locale> supportedLocales, bool showPerformanceOverlay, bool checkerboardRasterCacheImages, bool checkerboardOffscreenLayers, bool showSemanticsDebugger, bool debugShowWidgetInspector, bool debugShowCheckedModeBanner, InspectorSelectButtonBuilder? inspectorSelectButtonBuilder, Map<LogicalKeySet, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId})"
    },
    {
        "title": "DropdownButton",
        "introductionEN": "Shows the currently selected item and an arrow that opens a menu for selecting another item.",
        "introductionCN": "显示当前选定的项目和打开菜单以选择其他项目的箭头。",
        "routeName": "Widget/Material/DropdownButton",
        "imagePath": "assets/images/material/components-menus.png",
        "docPath": "https://api.flutter.dev/flutter/material/DropdownButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>DropdownButton",
        "constructors": "DropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, DropdownButtonBuilder? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, ValueChanged<T?>? onChanged, VoidCallback? onTap, int elevation, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize, bool isDense, bool isExpanded, double? itemHeight, Color? focusColor, FocusNode? focusNode, bool autofocus, Color? dropdownColor, double? menuMaxHeight})"
    },
    {
        "title": "ElevatedButton",
        "introductionEN": "A Material Design elevated button. A filled button whose material elevates when pressed.",
        "introductionCN": "Material Design高架按钮。填充按钮，按下时材料会升高。",
        "routeName": "Widget/Material/ElevatedButton",
        "imagePath": "assets/images/material/material-elevated-button.png",
        "docPath": "https://api.flutter.dev/flutter/material/ElevatedButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ButtonStyleButton>ElevatedButton",
        "constructors": "ElevatedButton({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ButtonStyle? style, FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, required Widget? child})"
    },
    {
        "title": "FloatingActionButton",
        "introductionEN": "A floating action button is a circular icon button that hovers over content to promote a primary action in the application. Floating action buttons are most commonly used in the Scaffold.floatingActionButton field.",
        "introductionCN": "浮动操作按钮是一个圆形图标按钮，悬停在内容上以提升应用程序中的主要操作。浮动操作按钮最常用于Scaffold.floatingActionButton字段中。",
        "routeName": "Widget/Material/FloatingActionButton",
        "imagePath": "assets/images/material/material-floating-action-button.png",
        "docPath": "https://api.flutter.dev/flutter/material/FloatingActionButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>FloatingActionButton",
        "constructors": "FloatingActionButton({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag, double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required VoidCallback? onPressed, MouseCursor? mouseCursor, bool mini, ShapeBorder? shape, Clip clipBehavior, FocusNode? focusNode, bool autofocus, MaterialTapTargetSize? materialTapTargetSize, bool isExtended})"
    },
    {
        "title": "IconButton",
        "introductionEN": "An icon button is a picture printed on a Material widget that reacts to touches by filling with color (ink).",
        "introductionCN": "图标按钮是打印在“材质”小部件上的图片，通过填充颜色（墨水）对触摸作出反应。",
        "routeName": "Widget/Material/IconButton",
        "imagePath": "assets/images/material/components-buttons-other.png",
        "docPath": "https://api.flutter.dev/flutter/material/IconButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>IconButton",
        "constructors": "IconButton({Key? key, double iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry padding, AlignmentGeometry alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required VoidCallback? onPressed, MouseCursor mouseCursor, FocusNode? focusNode, bool autofocus, String? tooltip, bool enableFeedback, BoxConstraints? constraints, required Widget icon})"
    },
    {
        "title": "OutlinedButton",
        "introductionEN": "A Material Design outlined button, essentially a TextButton with an outlined border.",
        "introductionCN": "一个Material Design轮廓按钮，本质上是一个带有轮廓边框的TextButton。",
        "routeName": "Widget/Material/OutlinedButton",
        "imagePath": "assets/images/material/material-outlined-button.png",
        "docPath": "https://api.flutter.dev/flutter/material/OutlinedButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ButtonStyleButton>OutlinedButton",
        "constructors": "OutlinedButton({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ButtonStyle? style, FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, required Widget child})"
    },
    {
        "title": "PopupMenuButton",
        "introductionEN": "Displays a menu when pressed and calls onSelected when the menu is dismissed because an item was selected.",
        "introductionCN": "按下时显示菜单，当菜单因选择项目而被解除时调用onSelected。",
        "routeName": "Widget/Material/PopupMenuButton",
        "imagePath": "assets/images/material/material-popup-menu-button.png",
        "docPath": "https://api.flutter.dev/flutter/material/PopupMenuButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>PopupMenuButton",
        "constructors": "PopupMenuButton({Key? key, required PopupMenuItemBuilder<T> itemBuilder, T? initialValue, PopupMenuItemSelected<T>? onSelected, PopupMenuCanceled? onCanceled, String? tooltip, double? elevation, EdgeInsetsGeometry padding, Widget? child, Widget? icon, double? iconSize, Offset offset, bool enabled, ShapeBorder? shape, Color? color, bool? enableFeedback})"
    },
    {
        "title": "TextButton",
        "introductionEN": "A Material Design text button. A simple flat button without a border outline.",
        "introductionCN": "Material Design文本按钮。一个没有边框轮廓的简单平面按钮。",
        "routeName": "Widget/Material/TextButton",
        "imagePath": "assets/images/material/components-buttons-usage.png",
        "docPath": "https://api.flutter.dev/flutter/material/TextButton-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ButtonStyleButton>TextButton",
        "constructors": "TextButton({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ButtonStyle? style, FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, required Widget child})"
    },
    {
        "title": "Checkbox",
        "introductionEN": "Checkboxes allow the user to select multiple options from a set. The Checkbox widget implements this component.",
        "introductionCN": "复选框允许用户从一组中选择多个选项。 Checkbox小部件实现此组件。",
        "routeName": "Widget/Material/Checkbox",
        "imagePath": "assets/images/material/material-checkbox.png",
        "docPath": "https://api.flutter.dev/flutter/material/AppBar-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Checkbox",
        "constructors": "Checkbox({Key? key, required bool? value, bool tristate, required ValueChanged<bool?>? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus, OutlinedBorder? shape, BorderSide? side})"
    },
    {
        "title": "Date & Time Pickers",
        "introductionEN": "Date pickers use a dialog window to select a single date on mobile. Time pickers use a dialog to select a single time (in the hours:minutes format) on mobile.",
        "introductionCN": "日期选择器使用对话窗口在移动设备上选择单个日期。时间选择器使用对话框在移动设备上选择单个时间（以小时：分钟格式）。",
        "routeName": "Widget/Material/DatePicker",
        "imagePath": "assets/images/material/components-pickers.png",
        "docPath": "https://api.flutter.dev/flutter/material/showDatePicker.html",
        "inheritance": "",
        "constructors": "Future<DateTime?> showDatePicker({required BuildContext context,required DateTime initialDate,required DateTime firstDate,required DateTime lastDate,DateTime? currentDate,DatePickerEntryMode initialEntryMode = DatePickerEntryMode.calendar,SelectableDayPredicate? selectableDayPredicate,String? helpText,String? cancelText,String? confirmText,Locale? locale,bool useRootNavigator = true,RouteSettings? routeSettings,TextDirection? textDirection,TransitionBuilder? builder,DatePickerMode initialDatePickerMode = DatePickerMode.day,String? errorFormatText,String? errorInvalidText,String? fieldHintText,String? fieldLabelText})"
    },
    {
        "title": "Radio",
        "introductionEN": "Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.",
        "introductionCN": "单选按钮允许用户从一组中选择一个选项。如果您认为用户需要并排查看所有可用选项，请使用单选按钮进行独占选择。",
        "routeName": "Widget/Material/Radio",
        "imagePath": "assets/images/material/material-radio.png",
        "docPath": "https://api.flutter.dev/flutter/material/Radio-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Radio",
        "constructors": "Radio({Key? key, required T value, required T? groupValue, required ValueChanged<T?>? onChanged, MouseCursor? mouseCursor, bool toggleable, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus})"
    },
    {
        "title": "Slider",
        "introductionEN": "Sliders let users select from a range of values by moving the slider thumb.",
        "introductionCN": "滑块允许用户通过移动滑块来选择一系列值。",
        "routeName": "Widget/Material/Slider",
        "imagePath": "assets/images/material/material-slider.png",
        "docPath": "https://api.flutter.dev/flutter/material/Slider-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Slider",
        "constructors": "Slider({Key? key, required double value, required ValueChanged<double>? onChanged, ValueChanged<double>? onChangeStart, ValueChanged<double>? onChangeEnd, double min, double max, int? divisions, String? label, Color? activeColor, Color? inactiveColor, MouseCursor? mouseCursor, SemanticFormatterCallback? semanticFormatterCallback, FocusNode? focusNode, bool autofocus})"
    },
    {
        "title": "Switch",
        "introductionEN": "On/off switches toggle the state of a single settings option. The Switch widget implements this component.",
        "introductionCN": "开/关切换可切换单个设置选项的状态。 Switch小部件实现此组件。",
        "routeName": "Widget/Material/Switch",
        "imagePath": "assets/images/material/material-switch.png",
        "docPath": "https://api.flutter.dev/flutter/material/Switch-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Switch",
        "constructors": "Switch({Key? key, required bool value, required ValueChanged<bool>? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, ImageErrorListener? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, ImageErrorListener? onInactiveThumbImageError, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialTapTargetSize? materialTapTargetSize, DragStartBehavior dragStartBehavior, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, bool autofocus})"
    },
    {
        "title": "TextField",
        "introductionEN": "Touching a text field places the cursor and displays the keyboard. The TextField widget implements this component.",
        "introductionCN": "触摸文本字段会放置光标并显示键盘。 TextField小部件实现此组件。",
        "routeName": "Widget/Material/TextField",
        "imagePath": "assets/images/material/material-text-field.png",
        "docPath": "https://api.flutter.dev/flutter/material/TextField-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>TextField",
        "constructors": "TextField({Key? key, TextEditingController? controller, FocusNode? focusNode, InputDecoration? decoration, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus, String obscuringCharacter, bool obscureText, bool autocorrect, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions, int? maxLines, int? minLines, bool expands, int? maxLength, @Deprecated('Use maxLengthEnforcement parameter which provides more specific ' 'behavior related to the maxLength limit. ' 'This feature was deprecated after v1.25.0-5.0.pre.') bool maxLengthEnforced, MaxLengthEnforcement? maxLengthEnforcement, ValueChanged<String>? onChanged, VoidCallback? onEditingComplete, ValueChanged<String>? onSubmitted, AppPrivateCommandCallback? onAppPrivateCommand, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle, BoxWidthStyle selectionWidthStyle, Brightness? keyboardAppearance, EdgeInsets scrollPadding, DragStartBehavior dragStartBehavior, bool enableInteractiveSelection, TextSelectionControls? selectionControls, GestureTapCallback? onTap, MouseCursor? mouseCursor, InputCounterWidgetBuilder? buildCounter, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints, String? restorationId})"
    },
    {
        "title": "AlertDialog",
        "introductionEN": "Alerts are urgent interruptions requiring acknowledgement that inform the user about a situation. The AlertDialog widget implements this component.",
        "introductionCN": "警报是紧急中断，需要确认通知用户情况。 AlertDialog小部件实现此组件。",
        "routeName": "Widget/Material/AlertDialog",
        "imagePath": "assets/images/material/material-alert-dialog.png",
        "docPath": "https://api.flutter.dev/flutter/material/AlertDialog-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>AlertDialog",
        "constructors": "AlertDialog({Key? key, Widget? title, EdgeInsetsGeometry? titlePadding, TextStyle? titleTextStyle, Widget? content, EdgeInsetsGeometry contentPadding, TextStyle? contentTextStyle, List<Widget>? actions, EdgeInsetsGeometry actionsPadding, VerticalDirection? actionsOverflowDirection, double? actionsOverflowButtonSpacing, EdgeInsetsGeometry? buttonPadding, Color? backgroundColor, double? elevation, String? semanticLabel, EdgeInsets insetPadding, Clip clipBehavior, ShapeBorder? shape, bool scrollable})"
    },
    {
        "title": "BottomSheet",
        "introductionEN": "Bottom sheets slide up from the bottom of the screen to reveal more content. You can call showBottomSheet() to implement a persistent bottom sheet or showModalBottomSheet() to implement a modal bottom sheet.",
        "introductionCN": "底部工作表从屏幕底部向上滑动以显示更多内容。您可以调用showBottomSheet（）来实现持久底部工作表或showModalBottomSheet（）来实现模式底部工作表。",
        "routeName": "Widget/Material/BottomSheet",
        "imagePath": "assets/images/material/material-bottom-sheets.png",
        "docPath": "https://api.flutter.dev/flutter/material/BottomSheet-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>BottomSheet",
        "constructors": "BottomSheet({Key? key, AnimationController? animationController, bool enableDrag, BottomSheetDragStartHandler? onDragStart, BottomSheetDragEndHandler? onDragEnd, Color? backgroundColor, double? elevation, ShapeBorder? shape, Clip? clipBehavior, required VoidCallback onClosing, required WidgetBuilder builder})"
    },
    {
        "title": "ExpansionPanel",
        "introductionEN": "Expansion panels contain creation flows and allow lightweight editing of an element. The ExpansionPanel widget implements this component.",
        "introductionCN": "扩展面板包含创建流程，允许轻量编辑元素。 ExpansionPanel小部件实现此组件。",
        "routeName": "Widget/Material/ExpansionPanel",
        "imagePath": "assets/images/material/components-expansion-panels.png",
        "docPath": "https://api.flutter.dev/flutter/material/ExpansionPanel-class.html",
        "inheritance": "",
        "constructors": "ExpansionPanel({required ExpansionPanelHeaderBuilder headerBuilder, required Widget body, bool isExpanded, bool canTapOnHeader, Color? backgroundColor})"
    },
    {
        "title": "SimpleDialog",
        "introductionEN": "Simple dialogs can provide additional details or actions about a list item. For example they can display avatars icons clarifying subtext or orthogonal actions (such as adding an account).",
        "introductionCN": "简单对话框可以提供有关列表项的其他详细信息或操作。例如，他们可以显示澄清子文本或正交动作的头像图标（例如添加帐户）。",
        "routeName": "Widget/Material/SimpleDialog",
        "imagePath": "assets/images/material/components-dialogs.png",
        "docPath": "https://api.flutter.dev/flutter/material/SimpleDialog-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>SimpleDialog",
        "constructors": "SimpleDialog({Key? key, Widget? title, EdgeInsetsGeometry titlePadding, TextStyle? titleTextStyle, List<Widget>? children, EdgeInsetsGeometry contentPadding, Color? backgroundColor, double? elevation, String? semanticLabel, EdgeInsets insetPadding, Clip clipBehavior, ShapeBorder? shape})"
    },
    {
        "title": "SnackBar",
        "introductionEN": "A lightweight message with an optional action which briefly displays at the bottom of the screen.",
        "introductionCN": "带有可选操作的轻量级消息，短暂显示在屏幕底部。",
        "routeName": "Widget/Material/SnackBar",
        "imagePath": "assets/images/material/material-snack-bar.png",
        "docPath": "https://api.flutter.dev/flutter/material/SnackBar-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>SnackBar",
        "constructors": "SnackBar({Key? key, required Widget content, Color? backgroundColor, double? elevation, EdgeInsetsGeometry? margin, EdgeInsetsGeometry? padding, double? width, ShapeBorder? shape, SnackBarBehavior? behavior, SnackBarAction? action, Duration duration, Animation<double>? animation, VoidCallback? onVisible})"
    },
    {
        "title": "Card",
        "introductionEN": "A Material Design card. A card has slightly rounded corners and a shadow.",
        "introductionCN": "材料设计卡。卡片有圆角和阴影。",
        "routeName": "Widget/Material/Card",
        "imagePath": "assets/images/material/material-card.png",
        "docPath": "https://api.flutter.dev/flutter/material/Card-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>Card",
        "constructors": "Card({Key? key, Color? color, Color? shadowColor, double? elevation, ShapeBorder? shape, bool borderOnForeground, EdgeInsetsGeometry? margin, Clip? clipBehavior, Widget? child, bool semanticContainer})"
    },
    {
        "title": "Chip",
        "introductionEN": "A Material Design chip. Chips represent complex entities in small blocks, such as a contact.",
        "introductionCN": "材料设计芯片。芯片表示小块中的复杂实体，例如联系人。",
        "routeName": "Widget/Material/Chip",
        "imagePath": "assets/images/material/material-chip.png",
        "docPath": "https://api.flutter.dev/flutter/material/Chip-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>Chip",
        "constructors": "Chip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, VoidCallback? onDeleted, Color? deleteIconColor, bool useDeleteButtonTooltip, String? deleteButtonTooltipMessage, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior, FocusNode? focusNode, bool autofocus, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor})"
    },
    {
        "title": "CircularProgressIndicator",
        "introductionEN": "A material design circular progress indicator, which spins to indicate that the application is busy.",
        "introductionCN": "材料设计循环进度指示器，旋转以指示应用程序正忙。",
        "routeName": "Widget/Material/CircularProgressIndicator",
        "imagePath": "assets/images/material/material-circular-progress-indicator.png",
        "docPath": "https://api.flutter.dev/flutter/material/CircularProgressIndicator-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ProgressIndicator>CircularProgressIndicator",
        "constructors": "CircularProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth, String? semanticsLabel, String? semanticsValue})"
    },
    {
        "title": "DataTable",
        "introductionEN": "Data tables display sets of raw data. They usually appear in desktop enterprise products. The DataTable widget implements this component.",
        "introductionCN": "数据表显示原始数据集。它们通常出现在桌面企业产品中。 DataTable小部件实现此组件。",
        "routeName": "Widget/Material/DataTable",
        "imagePath": "assets/images/material/material-data-table.png",
        "docPath": "https://api.flutter.dev/flutter/material/DataTable-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>DataTable",
        "constructors": "DataTable({Key? key, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending, ValueSetter<bool?>? onSelectAll, Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, double? dataRowHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, bool showCheckboxColumn, bool showBottomBorder, double? dividerThickness, required List<DataRow> rows, double? checkboxHorizontalMargin})"
    },
    {
        "title": "GridView",
        "introductionEN": "A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout. The GridView widget implements this component.",
        "introductionCN": "网格列表由以垂直和水平布局排列的重复单元格图案组成。 GridView小部件实现此组件。",
        "routeName": "Widget/Material/GridView",
        "imagePath": "assets/images/material/components-grid-lists.png",
        "docPath": "https://api.flutter.dev/flutter/material/GridView-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>ScrollView>BoxScrollView>GridView",
        "constructors": "GridView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Clip clipBehavior = Clip.hardEdge, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId})"
    },
    {
        "title": "Icon",
        "introductionEN": "A Material Design icon.",
        "introductionCN": "材料设计图标。",
        "routeName": "Widget/Material/Icon",
        "imagePath": "assets/images/assets/icon.png",
        "docPath": "https://api.flutter.dev/flutter/material/Icon-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>Icon",
        "constructors": "Icon(IconData? icon, {Key? key, double? size, Color? color, String? semanticLabel, TextDirection? textDirection})"
    },
    {
        "title": "Image",
        "introductionEN": "A widget that displays an image.",
        "introductionCN": "显示图像的小部件。",
        "routeName": "Widget/Material/Image",
        "imagePath": "assets/images/assets/image.png",
        "docPath": "https://api.flutter.dev/flutter/material/Image-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Image",
        "constructors": "Image({Key? key, required ImageProvider<Object> image, ImageFrameBuilder? frameBuilder, ImageLoadingBuilder? loadingBuilder, ImageErrorWidgetBuilder? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low})"
    },
    {
        "title": "LinearProgressIndicator",
        "introductionEN": "A material design linear progress indicator, also known as a progress bar.",
        "introductionCN": "材料设计线性进度指示器，也称为进度条。",
        "routeName": "Widget/Material/LinearProgressIndicator",
        "imagePath": "assets/images/material/material-linear-progress-indicator.png",
        "docPath": "https://api.flutter.dev/flutter/material/LinearProgressIndicator-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>ProgressIndicator>LinearProgressIndicator",
        "constructors": "LinearProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double? minHeight, String? semanticsLabel, String? semanticsValue})"
    },
    {
        "title": "Tooltip",
        "introductionEN": "Tooltips provide text labels that help explain the function of a button or other user interface action. Wrap the button in a Tooltip widget to show a label when the widget long pressed (or when the user takes some other appropriate action).",
        "introductionCN": "工具提示提供文本标签，有助于解释按钮或其他用户界面操作的功能。在工具提示小部件中包裹按钮，以在长按小部件时（或当用户采取其他适当的操作时）显示标签。",
        "routeName": "Widget/Material/Tooltip",
        "imagePath": "assets/images/material/material-tooltip.png",
        "docPath": "https://api.flutter.dev/flutter/material/Tooltip-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Tooltip",
        "constructors": "Tooltip({Key? key, required String message, double? height, EdgeInsetsGeometry? padding, EdgeInsetsGeometry? margin, double? verticalOffset, bool? preferBelow, bool? excludeFromSemantics, Decoration? decoration, TextStyle? textStyle, Duration? waitDuration, Duration? showDuration, Widget? child})"
    },
    {
        "title": "Divider",
        "introductionEN": "A one logical pixel thick horizontal line, with padding on either side.",
        "introductionCN": "一条逻辑像素粗的水平线，两边都有填充。",
        "routeName": "Widget/Material/Divider",
        "imagePath": "assets/images/material/material-divider.png",
        "docPath": "https://api.flutter.dev/flutter/material/Divider-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>Divider",
        "constructors": "Divider({Key? key, double? height, double? thickness, double? indent, double? endIndent, Color? color})"
    },
    {
        "title": "ListTile",
        "introductionEN": "A single fixed-height row that typically contains some text as well as a leading or trailing icon.",
        "introductionCN": "单个固定高度的行，通常包含一些文本以及前导或尾随图标。",
        "routeName": "Widget/Material/ListTile",
        "imagePath": "assets/images/material/material-list-tile.png",
        "docPath": "https://api.flutter.dev/flutter/material/ListTile-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatelessWidget>ListTile",
        "constructors": "ListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, EdgeInsetsGeometry? contentPadding, bool enabled, GestureTapCallback? onTap, GestureLongPressCallback? onLongPress, MouseCursor? mouseCursor, bool selected, Color? focusColor, Color? hoverColor, FocusNode? focusNode, bool autofocus, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth})"
    },
    {
        "title": "Stepper",
        "introductionEN": "A Material Design stepper widget that displays progress through a sequence of steps.",
        "introductionCN": "Material Design步进小部件，通过一系列步骤显示进度。",
        "routeName": "Widget/Material/Stepper",
        "imagePath": "assets/images/material/components-steppers.png",
        "docPath": "https://api.flutter.dev/flutter/material/Stepper-class.html",
        "inheritance": "Object>DiagnosticableTree>Widget>StatefulWidget>Stepper",
        "constructors": "Stepper({Key? key, required List<Step> steps, ScrollPhysics? physics, StepperType type, int currentStep, ValueChanged<int>? onStepTapped, VoidCallback? onStepContinue, VoidCallback? onStepCancel, ControlsWidgetBuilder? controlsBuilder})"
    }
]